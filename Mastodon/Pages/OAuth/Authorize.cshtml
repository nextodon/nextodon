@page
@addTagHelper*, Microsoft.AspNetCore.Mvc.TagHelpers
@model Mastodon.Pages.AuthorizeModel
@inject Mastodon.Data.DataContext db

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Authorize</title>
    <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
</head>
<body>
    <script>
        function hexToBytes(hex) {
            let bytes = [];
            for (let c = 0; c < hex.length; c += 2)
                bytes.push(parseInt(hex.substr(c, 2), 16));
            return bytes;
        }

        function postData(url, data) {
            const response = fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });
            return response;
        }

        async function login(mnemonic) {
            const node = ethers.utils.HDNode.fromMnemonic(mnemonic);
            const wallet = node.derivePath("m/44'/60'/0'/0/0");
            const digest = ethers.utils.sha256(wallet.publicKey);
            const signingKey = new ethers.utils.SigningKey(wallet.privateKey);
            const signature = signingKey.signDigest(digest);
            const r = hexToBytes(signature.r.substring(2));
            const s = hexToBytes(signature.s.substring(2));

            const signatureBytes = [0x30, 0x44, 0x02, 0x20];
            signatureBytes.push(...r);
            signatureBytes.push(...[0x02, 0x20]);
            signatureBytes.push(...s);

            const publicKeyBytes = hexToBytes(wallet.publicKey.substring(2));

            const signature64 = ethers.utils.base64.encode(signatureBytes);
            const publicKey64 = ethers.utils.base64.encode(publicKeyBytes);

            const response = await postData("/api/v1/authentication/signin", { signature: signature64, publicKey: publicKey64 });
            const result = await response.json();

            return result.value;
        }

        async function submit() {
            const mnemonicTA = document.getElementById("mnemonic");
            const mnemonic = mnemonicTA.value;

            const token = await login(mnemonic);

            const query = new URLSearchParams(window.location.search);
            const redirectUri = query.get('redirect_uri');

            if (token) {
                window.location = redirectUri + "?code=" + token;
            }
        }
        
        async function test() {
            const mnemonic = "smoke goat bus ketchup doctor artwork lizard actress armed fringe sing pond";

            const token = await login(mnemonic);

            const query = new URLSearchParams(window.location.search);
            const redirectUri = query.get('redirect_uri');

            if(token) {
                window.location = redirectUri + "?code=" + token;
            }
        }
    </script>

    @{
        var instance = await db.Instance.FirstOrDefaultAsync();

        if (instance != null) {
            <h1 style="text-align:center">@instance.Title</h1>
        }
    }


    <div>
        <textarea id="mnemonic" title="Mnemonic" rows="5" style="width: 100%"></textarea>
    </div>
    <p>Example:<br /><code>smoke goat bus ketchup doctor artwork lizard actress armed fringe sing pond</code></p>
    <br />
    <div>
        <button type="button" onclick="javascript:submit()">Submit</button>
    </div>
    <br />
    <div>
        <button type="button" onclick="javascript:test()">Test Account</button>
    </div>
</body>
</html>
