syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "account.proto";
import "list.proto";
import "relationship.proto";
import "status.proto";
import "token.proto";

option csharp_namespace = "Mastodon.Grpc";

service AccountApi {    
  rpc Register (RegisterRequest) returns (Token)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts"
      body: "*"
    };
  }

  rpc VerifyCredentials (google.protobuf.Empty) returns (Account)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/verify_credentials"
    };
  }

  rpc GetAccount (google.protobuf.StringValue) returns (Account)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{value}"
    };
  }

  rpc GetFollowers (GetFollowersRequest) returns (Accounts)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{accountId}/followers"
      response_body: "data"
    };
  }

  rpc GetFollowing (GetFollowingRequest) returns (Accounts)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{accountId}/following"
      response_body: "data"
    };
  }
  
  rpc GetLists (google.protobuf.StringValue) returns (Lists)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{value}/lists"
      response_body: "data"
    };
  }

  rpc GetStatuses (GetStatusesRequest) returns (Statuses)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{accountId}/statuses"
      response_body: "data"
    };
  }

  // Remove the given account from your followers.
  rpc RemoveFromFollowers (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/remove_from_followers"
    };
  }

  rpc GetRelationships (GetRelationshipsRequest) returns (Relationships)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/relationships"
      response_body: "data"
    };
  }

  rpc Follow (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/follow"
    };
  }
  
  rpc Unfollow (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/statuses/{value}/unfollow"
    };
  }
  
  rpc Block (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/block"
    };
  }
  
  rpc Unblock (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/statuses/{value}/unblock"
    };
  }

  rpc Mute (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/mute"
    };
  }
  
  rpc Unmute (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/statuses/{value}/unmute"
    };
  }

  rpc Pin (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/pin"
    };
  }
  
  rpc Unpin (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/statuses/{value}/unpin"
    };
  }
  
  rpc Note (NoteRequest) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/statuses/{accountId}/note"
      body: "*"
    };
  }
}

message RegisterRequest
{
    // The desired username for the account.
    string username = 1;

    // The email address to be used for login.
    string email = 2;

    // The password to be used for login.
    string password = 3;

    // Whether the user agrees to the local rules, terms, and policies. These should be presented to the user in order to allow them to consent before setting this parameter to TRUE.
    bool agreement = 4;

    // The language of the confirmation email that will be sent.
    string locale = 5;
    
    // If registrations require manual approval, this text will be reviewed by moderators.
    optional string reason = 6;
}

message GetRelationshipsRequest
{
    repeated string ids = 1 [json_name="id[]"];
}


message GetFollowersRequest
{
    // Account ID.
    string accountId = 1;

    // Return results older than this ID.
    optional string max_id = 2;
    
    // Return results newer than this ID.
    optional string since_id = 3;

    // Return results immediately newer than this ID.
    optional string min_id = 4;

    // Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.
    optional uint32 limit = 5;
}

message GetFollowingRequest
{
    // Account ID.
    string accountId = 1;

    // Return results older than this ID.
    optional string max_id = 2;
    
    // Return results newer than this ID.
    optional string since_id = 3;

    // Return results immediately newer than this ID.
    optional string min_id = 4;

    // Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.
    optional uint32 limit = 5;
}

message GetStatusesRequest
{
    // Account ID.
    string accountId = 1;

    // Return results older than this ID.
    optional string max_id = 2;
    
    // Return results newer than this ID.
    optional string since_id = 3;

    // Return results immediately newer than this ID.
    optional string min_id = 4;

    // Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.
    optional uint32 limit = 5;

    // Filter out statuses without attachments.
    optional bool only_media = 6;

    // Filter out statuses in reply to a different account.
    optional bool exclude_replies = 7;

    // Filter out boosts from the response.
    optional bool exclude_reblogs = 8;

    // Filter for pinned statuses only.
    optional bool pinned = 9;

    // Filter for statuses using a specific hashtag.
    optional string tagged = 10;
}

message NoteRequest
{
    string accountId = 1;
    optional string comment = 2;
}