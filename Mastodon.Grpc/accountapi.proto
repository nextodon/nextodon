syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "account.proto";
import "common.proto";
import "featuredtag.proto";
import "filter.proto";
import "list.proto";
import "relationship.proto";
import "status.proto";
import "tag.proto";
import "token.proto";

option csharp_namespace = "Mastodon.Grpc";

service AccountApi {     
  rpc UpdateCredentials (UpdateCredentialsRequest) returns (Account)
  {
//	option (google.api.http) = {
//      patch: "/api/v1/accounts/update_credentials"
//      body: "*"
//    };
  }

  rpc VerifyCredentials (google.protobuf.Empty) returns (Account)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/verify_credentials"
    };
  }

  rpc Search (AccountSearchRequest) returns (Accounts)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/search"
      response_body: "data"
    };
  }

  rpc GetById (google.protobuf.StringValue) returns (Account)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{value}"
    };
  }

  rpc Lookup (LookupRequest) returns (Account)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/lookup"
    };
  }

  rpc GetFollowedTags (DefaultPaginationParameters) returns (Tags)
  {
	option (google.api.http) = {
      get: "/api/v1/followed_tags"
      response_body: "data"
    };
  }

  rpc GetPreferences(google.protobuf.Empty) returns (Preferences)
  {
	option (google.api.http) = {
      get: "/api/v1/preferences"
      response_body: "data"
    };
  }
  
  rpc GetFeaturedTags (google.protobuf.Empty) returns (FeaturedTags)
  {
	option (google.api.http) = {
      get: "/api/v1/featured_tags"
      response_body: "data"
    };
  }

  rpc GetFollowers (GetFollowersRequest) returns (Accounts)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{accountId}/followers"
      response_body: "data"
    };
  }

  rpc GetFollowing (GetFollowingRequest) returns (Accounts)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{accountId}/following"
      response_body: "data"
    };
  }
  
  rpc GetFavourites (DefaultPaginationParameters) returns (Statuses)
  {
	option (google.api.http) = {
      get: "/api/v1/favourites"
      response_body: "data"
    };
  }

  rpc GetFilters (google.protobuf.Empty) returns (FiltersV1)
  {
	option (google.api.http) = {
      get: "/api/v1/filters"
      response_body: "data"
    };
  }
  
  rpc GetLists (google.protobuf.StringValue) returns (Lists)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{value}/lists"
      response_body: "data"
    };
  }

  rpc GetStatuses (GetStatusesRequest) returns (Statuses)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/{accountId}/statuses"
      response_body: "data"
    };
  }

  // Remove the given account from your followers.
  rpc RemoveFromFollowers (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/remove_from_followers"
    };
  }

  rpc GetRelationships (GetRelationshipsRequest) returns (Relationships)
  {
	option (google.api.http) = {
      get: "/api/v1/accounts/relationships"
      response_body: "data"
    };
  }

  rpc Follow (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/follow"
    };
  }
  
  rpc Unfollow (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/unfollow"
    };
  }
  
  rpc Block (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/block"
    };
  }
  
  rpc Unblock (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/unblock"
    };
  }

  rpc Mute (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/mute"
    };
  }
  
  rpc Unmute (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/unmute"
    };
  }

  rpc Pin (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/pin"
    };
  }
  
  rpc Unpin (google.protobuf.StringValue) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{value}/unpin"
    };
  }
  
  rpc Note (NoteRequest) returns (Relationship)
  {
	option (google.api.http) = {
      post: "/api/v1/accounts/{accountId}/note"
      body: "*"
    };
  }
}

message UpdateCredentialsRequest
{
    // The display name to use for the profile.
    optional string display_name = 1;

    // The account bio.
    optional string note = 2;
    
    // Avatar image encoded using multipart/form-data.
    optional string avatar = 3;
    
    // Header image encoded using multipart/form-data.
    optional string header = 4;
    
    // Whether manual approval of follow requests is required.
    optional bool locked = 5;
    
    // Whether the account has a bot flag.
    optional bool bot = 6;

    // Whether the account should be shown in the profile directory.
    optional bool discoverable = 7;

    repeated FieldAttribute fields_attributes = 8;
    
    optional Source source = 9;

    message FieldAttribute
    {
        string name = 1;
        string value = 2;
    }


    message Source
    {
        // Default post privacy for authored statuses. Can be public, unlisted, or private.
        string privacy = 1;

        // Whether to mark authored statuses as sensitive by default.
        bool sensitive = 2;

        // Default language to use for authored statuses (ISO 6391)
        string language = 3;
    }
}

message AccountSearchRequest
{
    // Search query for accounts.
    string q = 1;

    // Maximum number of results. Defaults to 40 accounts. Max 80 accounts.
    optional uint32 limit = 2;

    // Skip the first n results.
    optional uint32 offset = 3;

    // Attempt WebFinger lookup. Defaults to false. Use this when q is an exact address.
    optional bool resolve = 4;

    // Limit the search to users you are following. Defaults to false.
    optional bool following = 5;
}

message GetRelationshipsRequest
{
    repeated string ids = 1 [json_name="id[]"];
}

message GetFollowersRequest
{
    // Account ID.
    string accountId = 1;

    // Return results older than this ID.
    optional string max_id = 2;
    
    // Return results newer than this ID.
    optional string since_id = 3;

    // Return results immediately newer than this ID.
    optional string min_id = 4;

    // Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.
    optional uint32 limit = 5;
}

message GetFollowingRequest
{
    // Account ID.
    string accountId = 1;

    // Return results older than this ID.
    optional string max_id = 2;
    
    // Return results newer than this ID.
    optional string since_id = 3;

    // Return results immediately newer than this ID.
    optional string min_id = 4;

    // Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.
    optional uint32 limit = 5;
}

message GetStatusesRequest
{
    // Account ID.
    string accountId = 1;

    // Return results older than this ID.
    optional string max_id = 2;
    
    // Return results newer than this ID.
    optional string since_id = 3;

    // Return results immediately newer than this ID.
    optional string min_id = 4;

    // Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.
    optional uint32 limit = 5;

    // Filter out statuses without attachments.
    optional bool only_media = 6;

    // Filter out statuses in reply to a different account.
    optional bool exclude_replies = 7;

    // Filter out boosts from the response.
    optional bool exclude_reblogs = 8;

    // Filter for pinned statuses only.
    optional bool pinned = 9;

    // Filter for statuses using a specific hashtag.
    optional string tagged = 10;
}

message NoteRequest
{
    string accountId = 1;
    optional string comment = 2;
}

message LookupRequest
{
    string acct = 1;
}